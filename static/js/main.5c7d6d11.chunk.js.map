{"version":3,"sources":["firebase.js","Truck.js","Trailer.js","Tractor.js","TruckForm.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Truck","props","state","truck","firestore","collection","orderBy","onSnapshot","querySnapshot","data","docs","map","doc","console","log","setState","this","load","className","i","Card","key","Header","as","Body","Title","href","telegram","ListGroup","variant","trailers","trailer","j","Item","React","Component","Trailer","where","TruckForm","db","type","number","handleInputChange","bind","handleTypeChange","handleNumberChange","handleSubmit","event","target","value","parseInt","preventDefault","add","Form","onSubmit","Row","Col","Group","controlId","Label","InputGroup","Prepend","Text","Control","name","onChange","defaultValue","min","max","Button","disabled","App","Container","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c7d6d11.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCu3ttg9voQH78fk8RQwV6ioz3H4zyfrHg\",\r\n   authDomain: \"cu-truck-simulator.firebaseapp.com\",\r\n   databaseURL: \"https://cu-truck-simulator.firebaseio.com\",\r\n   projectId: \"cu-truck-simulator\",\r\n   storageBucket: \"cu-truck-simulator.appspot.com\",\r\n   messagingSenderId: \"683796677635\",\r\n   appId: \"1:683796677635:web:b7620bad16571aba737a36\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport firebase from \"./firebase\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nclass Truck extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      truck: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const db = firebase.firestore();\r\n    const load = db\r\n      .collection(\"truck\")\r\n      .orderBy(\"number\")\r\n      .orderBy(\"timestamp\")\r\n      .onSnapshot(querySnapshot => {\r\n        const data = querySnapshot.docs.map(doc => doc.data());\r\n        console.log(data);\r\n        this.setState({ truck: data });\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.load();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mb-2\">\r\n        {this.state.truck.map((truck, i) => (\r\n          <Card key={i} className=\"mb-2\">\r\n            <Card.Header as=\"h5\">Truck #{i + 1}</Card.Header>\r\n            <Card.Body>\r\n              <Card.Title>\r\n                Tractor 拖頭{\" \"}\r\n                <a href={\"https://t.me/\" + truck.telegram}>@{truck.telegram}</a>\r\n              </Card.Title>\r\n              <ListGroup variant=\"flush\">\r\n                {truck.trailers.map((trailer, j) => (\r\n                  <ListGroup.Item key={j}>\r\n                    Trailer 車卡{\" \"}\r\n                    <a href={\"https://t.me/\" + trailer}>@{trailer}</a>\r\n                  </ListGroup.Item>\r\n                ))}\r\n              </ListGroup>\r\n            </Card.Body>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Truck;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport firebase from \"./firebase\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nclass Trailer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      trailers: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const db = firebase.firestore();\r\n    const load = db\r\n      .collection(\"queue\")\r\n      .where(\"type\", \"==\", \"trailer\")\r\n      .where(\"number\", \">\", 0)\r\n      .orderBy(\"number\")\r\n      .orderBy(\"timestamp\")\r\n      .onSnapshot(querySnapshot => {\r\n        const data = querySnapshot.docs.map(doc => doc.data());\r\n        console.log(data);\r\n        this.setState({ trailers: data });\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.load();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mb-2\">\r\n        <Card>\r\n          <Card.Header as=\"h5\">Trailers 車卡</Card.Header>\r\n          <Card.Body>\r\n            <ListGroup variant=\"flush\">\r\n              {this.state.trailers.map((trailer, i) => (\r\n                <ListGroup.Item key={i}>\r\n                  <a href={\"https://t.me/\" + trailer.telegram}>\r\n                    @{trailer.telegram}\r\n                  </a>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Trailer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport firebase from \"./firebase\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nclass Tractor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tractors: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const db = firebase.firestore();\r\n    const load = db\r\n      .collection(\"queue\")\r\n      .where(\"type\", \"==\", \"tractor\")\r\n      .where(\"number\", \">\", 0)\r\n      .orderBy(\"number\")\r\n      .orderBy(\"timestamp\")\r\n      .onSnapshot(querySnapshot => {\r\n        const data = querySnapshot.docs.map(doc => doc.data());\r\n        console.log(data);\r\n        this.setState({ tractors: data });\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.load();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mb-2\">\r\n        <Card>\r\n          <Card.Header as=\"h5\">Tractors</Card.Header>\r\n          <Card.Body>\r\n            <ListGroup variant=\"flush\">\r\n              {this.state.tractors.map((cargo, i) => (\r\n                <ListGroup.Item key={i}>\r\n                  @{cargo.telegram} {cargo.number}\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tractor;\r\n","import React from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass TruckForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      db: firebase.firestore(),\r\n      telegram: \"\",\r\n      type: \"trailer\",\r\n      number: 1\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleTypeChange = this.handleTypeChange.bind(this);\r\n    this.handleNumberChange = this.handleNumberChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    this.setState({ telegram: event.target.value });\r\n  }\r\n\r\n  handleTypeChange(event) {\r\n    if (event.target.value === \"trailer\") {\r\n      this.setState({ number: 1 });\r\n    }\r\n    this.setState({ type: event.target.value });\r\n  }\r\n\r\n  handleNumberChange(event) {\r\n    this.setState({ number: parseInt(event.target.value) });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const db = firebase.firestore();\r\n    /*db.settings({\r\n      timestampsInSnapshots: true\r\n    });*/\r\n    const userRef = this.state.db.collection(\"queue\").add({\r\n      telegram: this.state.telegram,\r\n      type: this.state.type,\r\n      number: this.state.number\r\n    });\r\n    this.setState({ telegram: \"\", type: \"trailer\", number: 1 });\r\n  }\r\n\r\n  render() {\r\n    const { telegram, type } = this.state;\r\n    return (\r\n      <div className=\"mb-2\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Group controlId=\"truckForm.tgIDInput\">\r\n                <Form.Label>Telegram ID</Form.Label>\r\n                <InputGroup className=\"mb-2\">\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>@</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control\r\n                    name=\"telegram\"\r\n                    type=\"text\"\r\n                    value={this.state.telegram}\r\n                    onChange={this.handleInputChange}\r\n                  />\r\n                </InputGroup>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group\r\n                controlId=\"truckForm.TypeSelect\"\r\n                value={this.state.type}\r\n                onChange={this.handleTypeChange}\r\n              >\r\n                <Form.Label>I am...</Form.Label>\r\n                <Form.Control as=\"select\" defaultValue=\"trailer\">\r\n                  <option value=\"tractor\">Tractor 拖頭</option>\r\n                  <option value=\"trailer\">Trailer 車卡</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            {this.state.type === \"tractor\" ? (\r\n              <Col>\r\n                <Form.Group controlId=\"truckForm.numberInput\">\r\n                  <Form.Label>Trailer(s) mountable</Form.Label>\r\n                  <Form.Control\r\n                    name=\"number\"\r\n                    type=\"number\"\r\n                    value={this.state.number}\r\n                    onChange={this.handleNumberChange}\r\n                    min=\"1\"\r\n                    max=\"5\"\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            ) : null}\r\n          </Form.Row>\r\n          <p>\r\n            <h2>Notice</h2>\r\n            <ol>\r\n              <li>Please give us ~30 seconds to pair tractor/trailor(s).</li>\r\n              <li>\r\n                Submit once only unless your have lost contact with the\r\n                tractor/trailor.\r\n              </li>\r\n              <li>\r\n                Please exchange infol through Secret Chat on Telegram to allow\r\n                messages to be encrypted.\r\n              </li>\r\n            </ol>\r\n          </p>\r\n          <Form.Row>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              disabled={telegram === \"\"}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Row>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TruckForm;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport Truck from \"./Truck.js\";\r\nimport Trailer from \"./Trailer.js\";\r\nimport Tractor from \"./Tractor.js\";\r\nimport TruckForm from \"./TruckForm.js\";\r\nimport firebase from \"./firebase\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nfunction App() {\r\n  const db = firebase.firestore();\r\n  return (\r\n    <Container>\r\n      <div className=\"title\">\r\n        <h1>\r\n          <i className=\"display-2\">CU Truck Simulator </i>\r\n          <small>Convocation Public Beta</small>\r\n        </h1>\r\n      </div>\r\n      <div className=\"App\">\r\n        <h2>Register</h2>\r\n        <TruckForm />\r\n        <Row>\r\n          <Col md={8}>\r\n            <h2>Loading Area</h2>\r\n            <Truck />\r\n          </Col>\r\n          <Col md={4}>\r\n            {/* <Tractor /> */}\r\n            <h2>Waiting Area</h2>\r\n            <Trailer />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}